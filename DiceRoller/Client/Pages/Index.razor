@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@using DiceRoller.Shared;
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@implements IDisposable

<div @ref="playerInfo">
    <div class="form-group">
        <label>
            Player name:
            <input @bind="playerName" />
        </label>
    </div>
    <div class="form-group">
        <label>
            Character name:
            <input @bind="characterName" size="50" />
        </label>
    </div>
    <button @onclick="Join" disabled="@(!IsPlayerHubConnected)">Join</button>
</div>

<div class="row">
    @foreach (var player in playerList)
    {
    <div class="col-lg-4 col-sm-12">
        <div class="card">
            <div class="card-header">
                <p>@player.PlayerName</p>
                <h1>@player.CharacterName</h1>
            </div>
            <div class="card-body">
                <div class="form-group" style="@(player == GetPlayer ? "" : "display: none;")">
                    <label>
                        Dice:
                        <input @bind="dice" />
                    </label>
                    <button @onclick="Roll" disabled="@(!IsDiceHubConnected)">Roll</button>
                </div>
                @{
                        var roll = GetPlayerResults(rollResults, player.Id);
                        var previous = GetPlayerResults(previousRollResults, player.Id);
                }
                <table class="table table-condensed">
                    <tr>
                        <th></th>
                        <th>Total</th>
                        <th>Result</th>
                        <th>Dice</th>
                    </tr>
                    <tr>
                        <td>New</td>
                        <td>@(!string.IsNullOrEmpty(roll.Request) ? roll.Total.ToString() : "")</td>
                        <td>@string.Join(", ", roll.Result)</td>
                        <td>@roll.Request</td>
                    </tr>
                    <tr>
                        <td>Old</td>
                        <td>@(!string.IsNullOrEmpty(previous.Request) ? previous.Total.ToString() : "")</td>
                        <td>@string.Join(", ", previous.Result)</td>
                        <td>@previous.Request</td>
                    </tr>
                </table>
            </div>
        </div>
    </div>
    }
</div>

@code {
    private HubConnection playerHubConnection;
    private HubConnection diceHubConnection;
    private List<PlayerModel> playerList = new List<PlayerModel>();
    private string playerName;
    private string characterName;
    private Dictionary<string, Roll> rollResults = new Dictionary<string, Roll>();
    private Dictionary<string, Roll> previousRollResults = new Dictionary<string, Roll>();
    private string dice;
    private ElementReference playerInfo;

    protected override async Task OnInitializedAsync()
    {
        playerHubConnection = new HubConnectionBuilder()
        .WithUrl(NavigationManager.ToAbsoluteUri("/playerhub"))
        .Build();

        playerHubConnection.On<List<PlayerModel>>("PlayersChanged", (players) =>
        {
            playerList = players;
            StateHasChanged();
        });

        await playerHubConnection.StartAsync();

        diceHubConnection = new HubConnectionBuilder()
        .WithUrl(NavigationManager.ToAbsoluteUri("/dicehub"))
        .Build();

        diceHubConnection.On<PlayerModel, Roll>("DiceRolled", (player, roll) =>
        {
            previousRollResults.Remove(player.Id);
            previousRollResults.Add(player.Id, GetPlayerResults(rollResults, player.Id));
            rollResults.Remove(player.Id);
            rollResults.Add(player.Id, roll);
            StateHasChanged();
        });

        await diceHubConnection.StartAsync();
    }

    private void Join()
    {
        JSRuntime.InvokeVoidAsync("hideElement", playerInfo);
        playerHubConnection.SendAsync("Join", playerName, characterName);
    }

    private PlayerModel GetPlayer => playerList.First(p => p.PlayerName == playerName && p.CharacterName == characterName);

    private void Roll()
    {
        var regex = new System.Text.RegularExpressions.Regex(@"(?<diceCount>[0-9]+)d(?<diceValue>[0-9]+)(?<diceMod>([\+\-][0-9]+))?");
        var match = regex.Match(dice);
        if (match.Success)
        {
            diceHubConnection.SendAsync("RollDice", GetPlayer, dice);
        }
    }

    public bool IsPlayerHubConnected =>
    playerHubConnection.State == HubConnectionState.Connected;

    public bool IsDiceHubConnected =>
        diceHubConnection.State == HubConnectionState.Connected;

    private Roll GetPlayerResults(Dictionary<string, Roll> dict, string playerId)
    {
        if (dict.TryGetValue(playerId, out var playerResults))
        {
            return playerResults;
        }
        return new Roll();
    }

    public void Dispose()
    {
        _ = playerHubConnection.DisposeAsync();
        _ = diceHubConnection.DisposeAsync();
    }
}
